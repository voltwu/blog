I"Í!<p>Hello guys. I would like to explain how to use Jetty to build HTTP server in this blog. Welcome to leave comments if you have any troubles or thoughts about it.</p>

<h1 id="precondition">Precondition</h1>

<p>Readers should download Jetty before the starting. According to official documents, readers can download Jetty at <a href="https://www.eclipse.org/jetty/download.html">the download page</a>, and access API document</p>

<h1 id="build-http-jetty-server">Build HTTP Jetty server</h1>
<p>The first step, create a server instance</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Server</span> <span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Server</span><span class="o">(</span><span class="mi">8081</span><span class="o">);</span>
</code></pre></div></div>
<p>Create a basic jetty server object that will listen on port 8081. Note that if you set this to port 0 then a randomly available port will be assigned that you can either look in the logs for the port or programmatically obtain it for use in test cases.</p>

<p>The second step, need to set Handler which should be wrapped.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">server</span><span class="o">.</span><span class="na">setHandler</span><span class="o">(</span><span class="n">handler</span><span class="o">);</span>
</code></pre></div></div>
<p>the handler is an instance of an interface implementation class of <code class="highlighter-rouge">org.eclipse.jetty.server.Handler</code> interface. A Handler instance is required by an <code class="highlighter-rouge">org.eclipse.jetty.server.Server</code> to handle incoming HTTP requests.</p>

<p><code class="highlighter-rouge">Handlers</code> are passed the servlet API request and response object but are not <code class="highlighter-rouge">Servlets</code>. The servlet container is implemented by handlers for context, security, session, and servlet that modify the request object before passing it to the next stage of handling.</p>

<p><code class="highlighter-rouge">org.eclipse.jetty.server.Handler</code> interface has lots of derived class, this chapter will demonstrate <code class="highlighter-rouge">ServletContextHandler</code> usage.</p>

<p><code class="highlighter-rouge">handler</code> has a relevance with <code class="highlighter-rouge">Servlet</code> Instance by function <code class="highlighter-rouge">handler.addServlet()</code>.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">ServletContextHandler</span> <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ServletContextHandler</span><span class="o">(</span>
  	<span class="nc">ServletContextHandler</span><span class="o">.</span><span class="na">SESSIONS</span><span class="o">|</span><span class="nc">ServletContextHandler</span><span class="o">.</span><span class="na">NO_SECURITY</span><span class="o">);</span>
  <span class="n">handler</span><span class="o">.</span><span class="na">setContextPath</span><span class="o">(</span><span class="s">"/hello"</span><span class="o">);</span>
  <span class="nc">ServletHolder</span> <span class="n">myserverletholder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ServerletHolder</span><span class="o">(</span><span class="k">new</span> <span class="n">myserverlet</span><span class="o">());</span>
  <span class="n">handler</span><span class="o">.</span><span class="na">addServlet</span><span class="o">(</span><span class="n">myserverletholder</span><span class="o">,</span> <span class="n">pathSpec</span><span class="o">);</span>
</code></pre></div></div>
<p><code class="highlighter-rouge">myservletholder</code> is an instance of <code class="highlighter-rouge">org.eclipse.jetty.servlet.ServletHolder</code>. itâ€™s a servlet instance and context holder. Holds the name, params and some state of a <code class="highlighter-rouge">javax.servlet.Servlet</code> instance. It implements the <code class="highlighter-rouge">ServletConfig</code> interface. This class will organize the loading of servlets when needed or requested.</p>

<p>Each <code class="highlighter-rouge">ServletHolder</code> instance normally interests a <code class="highlighter-rouge">javax.servlet.Servlet</code> interface. servlet is a small Java program that runs within a Web server. servlets receive and respond to requests from Web clients, usually across HTTP(HyperText Transfer Protocol). To implement this interface,  you can write an HTTP servlet that extends to <code class="highlighter-rouge">javax.servlet.http.HttpServlet</code>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">myservlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>
        <span class="cm">/**
         * handle get request
         */</span>
        <span class="nd">@Override</span>
        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span>
                <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span>
                <span class="nc">IOException</span> <span class="o">{</span>
        <span class="c1">//somecode</span>
        <span class="o">}</span>
        <span class="cm">/**
         * handle post request
         */</span>
        <span class="nd">@Override</span>
        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span>
          <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>
         <span class="c1">//somecode</span>
        <span class="o">}</span>
</code></pre></div></div>

<p>The last step, need to start the server</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">server</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</code></pre></div></div>
<p>We have discussed the <code class="highlighter-rouge">ServletContextHandler</code> usage, actually <code class="highlighter-rouge">org.eclipse.jetty.server.Handler</code> interface has lot of derived classes.  The <code class="highlighter-rouge">ServletContextHandler</code> is only one of the <code class="highlighter-rouge">org.eclipse.jetty.server.Handler</code>â€™s drived classes. And the <code class="highlighter-rouge">ServletContextHandler</code> is not suitable for handling more complicated scenarios, my GitHub had demonstrated <a href="https://github.com/voltWu/Jetty-HTTP-example">WebAppContext extends to org.eclipse.jetty.server.Handler</a> demo.</p>

<h1 id="epilogue">Epilogue</h1>
<p>Above demonstrated how to create a simple HTTP server use Jetty, I hope this page will be helpful for you. if you have any troubles or thoughts, welcome to leave messages. Have a good day!</p>

<div id="disqus_thread"></div>
<script>

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://https-github-com-voltwu-blog.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>

<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

:ET