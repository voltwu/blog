I"<p><span style="font-size: 0.75em;">
&gt;
<a href="/blog/csharp/2020/02/28/Entitiy-Framework-Tutorial/" style="cursor: pointer;text-decoration: none;">main</a>
&gt;
<a href="/blog/csharp/2020/02/28/EF-Core-Load-Related-Entities/" style="cursor: pointer;text-decoration: none;">query</a>
<span></span></span></p>

<p><strong>Eager Loading</strong> means that the related data is transparently loaded from the database when the navigation property is accessed.</p>

<p>This project can be found in <a href="www:asd">Github</a></p>

<h1 id="how-to-implement-lazy-loading">How to implement lazy loading</h1>
<p>There have several ways to implement lazy loading. the simplest way is to use <code class="highlighter-rouge">Microsoft.EntityFrameworkCore.Proxies</code> package.</p>

<p><strong>First</strong>, need to install <code class="highlighter-rouge">Microsoft.EntityFrameworkCore.Proxies</code> on <em>Nuget Package Manager</em></p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">PM&gt;</span><span class="w"> </span>Install-Package Microsoft.EntityFrameworkCore.Proxies
</code></pre></div></div>

<p><strong>Second</strong>, enable lazy loading with a call to <code class="highlighter-rouge">UseLazyLoadingProxies</code> in your <code class="highlighter-rouge">OnConfiguring</code> method</p>
<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnConfiguring</span><span class="p">(</span><span class="n">DbContextOptionsBuilder</span> <span class="n">optionsBuilder</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">optionsBuilder</span><span class="p">.</span>
        <span class="nf">UseLazyLoadingProxies</span><span class="p">().</span>
        <span class="nf">UseSqlServer</span><span class="p">(</span><span class="s">"Server=.;Database=SchoolDb;Trusted_Connection=True;"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Third</strong>, make sure all entities are public, can be inherited from, the navigation property must be virtual, contractors are forbidden that all are private.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">Team</span><span class="p">{</span>
  <span class="c1">//...</span>
  <span class="k">public</span> <span class="k">virtual</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Player</span><span class="p">&gt;</span> <span class="n">Players</span> <span class="p">{</span> <span class="k">set</span><span class="p">;</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">Player</span><span class="p">{</span>
  <span class="c1">//...</span>
  <span class="k">public</span> <span class="k">virtual</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">HomeAddress</span><span class="p">&gt;</span> <span class="n">Addresses</span> <span class="p">{</span> <span class="k">set</span><span class="p">;</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Fourth</strong>, the conceptual of lazy loading is that the related entities will be transparently loaded from the database, so it is a separate SQL query operation. don’t release your <code class="highlighter-rouge">DbContext</code> instance, unless you make sure you don’t need it anymore.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">context</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SchoolContext</span><span class="p">())</span>
<span class="p">{</span>
    <span class="c1">//the lake has a Players navigation property</span>
    <span class="c1">//player is not loaded yet</span>
    <span class="kt">var</span> <span class="n">lake</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">teams</span><span class="p">.</span><span class="nf">FirstOrDefault</span><span class="p">();</span>

    <span class="c1">//Access the Player navigation property</span>
    <span class="c1">//Player is loaded during the access</span>
    <span class="c1">//but the Addresses is still not loaded , because we haven't accessed it yet.</span>
    <span class="kt">var</span> <span class="n">player</span> <span class="p">=</span> <span class="n">lake</span><span class="p">.</span><span class="n">Players</span><span class="p">.</span><span class="nf">FirstOrDefault</span><span class="p">();</span>

    <span class="c1">//The Addresses navigation property is loaded, because  we have accessed it.</span>
    <span class="kt">var</span> <span class="n">address</span> <span class="p">=</span> <span class="n">player</span><span class="p">.</span><span class="n">Addresses</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>Note:
<code class="highlighter-rouge">UseLazyLoadingProxies</code> requires all entity types to be public, unsealed, have virtual navigation properties, and have a public or protected constructor</p>
</blockquote>

<p>we have known that use the <code class="highlighter-rouge">Microsoft.EntityFrameworkCore.Proxies</code> can complete the lazy loading easily.</p>

<p>But, if we did not want to use <code class="highlighter-rouge">Microsoft.EntityFrameworkCore.Proxies</code> package or any other packages. Does there exist a way to complete this? The answer is yes absolutely. The <code class="highlighter-rouge">proxies</code> package works by injecting the <code class="highlighter-rouge">ILazyLoading</code> service into an entity. so we can define our <code class="highlighter-rouge">ILazyLoading</code> service in our entities by ourself.</p>

<p>Writing ourselves <code class="highlighter-rouge">ILazyLoading</code> is still depending on the <code class="highlighter-rouge">Microsoft.EntityFrameworkCore.Abstractions</code> package.  However, if you don’t want to depend on any other packages, it’s possible to avoid any depending packages by using a delegate. Here I won’t go into it.</p>

<h1 id="visual-studio-debugger-itsel-access-the-navigation-property">Visual Studio Debugger itsel access the navigation property</h1>
<p>if you are using Visual Studio, and trying to debug the program, you may found out the related entities have been loaded automatically. This is because the <strong>Visual Studio Debugger</strong> will try to access the navigation property, so it will trigger the automatic loading mechanism.</p>

<p>So, Even though the code is not run to the navigation access place, but you still can find the related entities have loaded from the debug window.</p>

:ET