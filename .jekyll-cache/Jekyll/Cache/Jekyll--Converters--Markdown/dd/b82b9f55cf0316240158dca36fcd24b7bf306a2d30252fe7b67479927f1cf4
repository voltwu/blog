I"_N<!--navigation bar-->
<div class="navi-link-container">
  
    
      
    
  
    
      
    
  
    
  
    
      
    
  
    
      
    
  
    
      
    
  
    
      
    
  
    
      
          <a href="/blog/csharp-ef/2020/02/28/Entitiy-Framework-Tutorial/" class="navi-link">main</a>
      
    
  
    
      
    
  
    
      
    
  
    
  
    
  
    
  
    
  
    
  
</div>
<!--navigation bar-->

<h1 id="whats-the-difference-between-ef6-and-ef-core">What’s the difference between EF6 and EF Core?</h1>
<p>Both EF6(Entity Framework 6) and EF Core(Entity Framework Core) are object-relational mappers. EF Core is a more modern, lightweight and extensible version of Entity Framework that has very similar capabilities and benefits to EF6. EF Core is a complete rewrite and contains many new features that not include in EF6.  <a href="https://docs.microsoft.com/en-us/ef/efcore-and-ef6/index">Here</a> examined the many differences.</p>

<h1 id="install-entity-framework-core">Install Entity Framework Core</h1>
<p>Here you will learn how to use EF Core with .NET Core Console Application step by step. To demonstrate this, we will create a .NET Core Console Application using Visual Studio 2017 (or greater).</p>

<p>it’s very convenient to create a .NET Core Console Application. I had already created a .NET Core Console Application.</p>

<p><img src="/blog/public/img/2020-02-25-Tutorial-Explore-EF-Core-Console-Application-a.png" alt="Alt" /></p>

<p>Open <code class="highlighter-rouge">Tools</code> -&gt; <code class="highlighter-rouge">NuGet Package Manager</code> -&gt; <code class="highlighter-rouge">Manage Nuget Package For Solution</code></p>

<p><img src="/blog/public/img/2020-02-25-Tutorial-Explore-EF-Core-Console-Application-b.png" alt="Alt" /></p>

<p>Search for <code class="highlighter-rouge">Microsoft.EntityFrameworkCore.SqlServer</code>, then install it.</p>

<p>The EF Core supports many database engines. see <a href="https://docs.microsoft.com/en-us/ef/core/providers/index?tabs=vs">Database Provider</a> for details. I am using SQL Server as my database, So I installed the <code class="highlighter-rouge">Microsoft.EntityFrameworkCore.SqlServer</code> package. And I also need to install the <em>Entity Framework Core Tools</em> for the NuGet Package Console in Visual Studio. Search for <code class="highlighter-rouge">Microsoft.EntityFrameworkCore.Tools</code> in <em>NuGet Package For Solution</em> dialogue and install it.</p>

<h1 id="create-the-model">Create The Model</h1>
<p>Entity Framework Core needs to have a model(Entity Data Model) to communicate with the underlying database.</p>

<p>The EF model has three parts: conceptual model, storage model and mappings between the conceptual and storage model. EF Core builds the conceptual model based on your domain classes(entity classes), configurations, annotations.  EF Core builds the storage model and mappings based on the provider you use.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">EFCoreProject.Model</span>
<span class="p">{</span>
    <span class="c1">//context class SchoolContext</span>
    <span class="k">class</span> <span class="nc">SchoolContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Team</span><span class="p">&gt;</span> <span class="n">teams</span> <span class="p">{</span> <span class="k">set</span><span class="p">;</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Player</span><span class="p">&gt;</span> <span class="n">players</span> <span class="p">{</span> <span class="k">set</span><span class="p">;</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnConfiguring</span><span class="p">(</span><span class="n">DbContextOptionsBuilder</span> <span class="n">optionsBuilder</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">optionsBuilder</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span><span class="s">"Server=.;Database=EFCoreDb;Trusted_Connection=True;"</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="c1">//entity class Team</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Team</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="n">Key</span><span class="p">]</span>
        <span class="p">[</span><span class="n">Required</span><span class="p">]</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">id</span> <span class="p">{</span> <span class="k">set</span><span class="p">;</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

        <span class="p">[</span><span class="nf">Required</span><span class="p">(</span><span class="n">ErrorMessage</span> <span class="p">=</span> <span class="s">"name is required"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">MaxLength</span><span class="p">(</span><span class="m">20</span><span class="p">,</span><span class="n">ErrorMessage</span> <span class="p">=</span> <span class="s">"name is too long"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">name</span> <span class="p">{</span> <span class="k">set</span><span class="p">;</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Player</span><span class="p">&gt;</span> <span class="n">players</span> <span class="p">{</span> <span class="k">set</span><span class="p">;</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
    <span class="c1">//entity class Player</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Player</span> 
    <span class="p">{</span>
        <span class="p">[</span><span class="n">Key</span><span class="p">]</span>
        <span class="p">[</span><span class="n">Required</span><span class="p">]</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">id</span> <span class="p">{</span> <span class="k">set</span><span class="p">;</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

        <span class="p">[</span><span class="nf">Required</span><span class="p">(</span><span class="n">ErrorMessage</span> <span class="p">=</span> <span class="s">"name is required"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">MaxLength</span><span class="p">(</span><span class="m">20</span><span class="p">,</span> <span class="n">ErrorMessage</span> <span class="p">=</span> <span class="s">"name is too long"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">name</span> <span class="p">{</span> <span class="k">set</span><span class="p">;</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>As you can see in the snippet. I created two entity classes (domain classes): <code class="highlighter-rouge">Player</code> and <code class="highlighter-rouge">Team</code>. the <code class="highlighter-rouge">[Key]</code> annotation represents to denote this property uniquely identifies this entity. the <code class="highlighter-rouge">[Required]</code> annotation represents this field is required. the <code class="highlighter-rouge">[MaxLength]</code> annotation specifies the maximum length of array or string data. these annotations come from 
<a href="https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations?redirectedfrom=MSDN&amp;view=netframework-4.8">System.ComponentModel.DataAnnotations</a> namespace.</p>

<p>we also created a <code class="highlighter-rouge">SchoolContext</code> class, which is driving from <code class="highlighter-rouge">DbContext</code>. <code class="highlighter-rouge">SchoolContext</code> has two <code class="highlighter-rouge">DbSet&lt;TEntity&gt;</code> properties, for <code class="highlighter-rouge">Team</code> and <code class="highlighter-rouge">Player</code> type, which will be mapped to <code class="highlighter-rouge">teams</code> and <code class="highlighter-rouge">players</code> tables in the underlying database. the <code class="highlighter-rouge">SchoolContext</code> also overrides the <code class="highlighter-rouge">OnConfiguring</code> method. the <code class="highlighter-rouge">OnConfiguring</code> method used to specify which database to use.</p>

<h1 id="adding-a-migration">Adding A Migration</h1>
<p>EF Core includes different methods to update or create migrations. we can execute migration command on <em>NuGet Package Manage Console</em> or <em>CLI(command-line interface)</em>.</p>

<p>my environment is Visual Studio, open <code class="highlighter-rouge">Tools</code> -&gt; <code class="highlighter-rouge">NuGet Package Manager</code> -&gt; <code class="highlighter-rouge">Package Manager Console</code>. enter the following command:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PM&gt; add-migration CreateSchoolDB
</code></pre></div></div>

<p>This will create a <code class="highlighter-rouge">Migrations</code> folder in the project and create the <code class="highlighter-rouge">ModelSnapshot</code> file.</p>

<p><img src="/blog/public/img/2020-02-25-Tutorial-Explore-EF-Core-Console-Application-c.png" alt="Alt" /></p>

<p>if want to undo this action, use command <code class="highlighter-rouge">Remove-Migration</code></p>

<p>After creating a migration, we still need to sync the effects to the database with an <code class="highlighter-rouge">update-migration</code> command, as below.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PM&gt; update-database
</code></pre></div></div>

<p>Each time when we made changes to the entity class, we also need to sync the effect to the database using <code class="highlighter-rouge">add-migration</code> and <code class="highlighter-rouge">update-database</code>.</p>

<h1 id="crud-create-read-update-delete">CRUD (Create, Read, Update, Delete)</h1>
<p>Now we can use the context class to save, retrieve, modify and remove data, as shown below:</p>

<p><strong>Insert data:</strong></p>
<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span><span class="p">(</span><span class="kt">var</span> <span class="n">context</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SchoolContext</span><span class="p">())</span>
<span class="p">{</span>
        <span class="n">Team</span> <span class="n">team_lake</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Team</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">name</span> <span class="p">=</span> <span class="s">"lake"</span><span class="p">,</span>
            <span class="n">players</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Player</span><span class="p">&gt;()</span>
            <span class="p">{</span>
                <span class="k">new</span> <span class="nf">Player</span><span class="p">(){</span> <span class="n">name</span><span class="p">=</span><span class="s">"Kobe"</span><span class="p">},</span>
                <span class="k">new</span> <span class="nf">Player</span><span class="p">(){</span> <span class="n">name</span><span class="p">=</span><span class="s">"O`Neal"</span><span class="p">},</span>
                <span class="k">new</span> <span class="nf">Player</span><span class="p">(){</span> <span class="n">name</span><span class="p">=</span><span class="s">"Nash"</span><span class="p">}</span>
            <span class="p">}</span>
        <span class="p">};</span>
        <span class="n">Team</span> <span class="n">team_warrior</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Team</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">name</span> <span class="p">=</span> <span class="s">"warrior"</span><span class="p">,</span>
            <span class="n">players</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Player</span><span class="p">&gt;</span>
            <span class="p">{</span>
                <span class="k">new</span> <span class="nf">Player</span><span class="p">(){</span><span class="n">name</span><span class="p">=</span><span class="s">"Curry"</span><span class="p">},</span>
                <span class="k">new</span> <span class="nf">Player</span><span class="p">(){</span><span class="n">name</span><span class="p">=</span><span class="s">"Thompson"</span><span class="p">},</span>
                <span class="k">new</span> <span class="nf">Player</span><span class="p">(){</span><span class="n">name</span><span class="p">=</span><span class="s">"Green"</span><span class="p">}</span>
            <span class="p">}</span>
        <span class="p">};</span>
        <span class="n">context</span><span class="p">.</span><span class="n">teams</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">team_lake</span><span class="p">);</span>
        <span class="n">context</span><span class="p">.</span><span class="n">teams</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">team_warrior</span><span class="p">);</span>
        <span class="n">context</span><span class="p">.</span><span class="nf">SaveChanges</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Update data:</strong></p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span><span class="p">(</span><span class="kt">var</span> <span class="n">context</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SchoolContext</span><span class="p">())</span>
<span class="p">{</span>                
         <span class="kt">var</span> <span class="n">Kobe</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">players</span><span class="p">.</span>
            <span class="n">Where</span><span class="p">&lt;</span><span class="n">Player</span><span class="p">&gt;(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">name</span> <span class="p">==</span> <span class="s">"Kobe"</span><span class="p">).</span>
            <span class="n">First</span><span class="p">&lt;</span><span class="n">Player</span><span class="p">&gt;();</span>
        <span class="n">Kobe</span><span class="p">.</span><span class="n">name</span> <span class="p">=</span> <span class="s">"Kobe Bean Bryant"</span><span class="p">;</span>
        <span class="n">context</span><span class="p">.</span><span class="nf">SaveChanges</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Delete data:</strong></p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span><span class="p">(</span><span class="kt">var</span> <span class="n">context</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SchoolContext</span><span class="p">())</span>
<span class="p">{</span>
        <span class="kt">var</span> <span class="n">green</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">players</span><span class="p">.</span>
            <span class="n">Where</span><span class="p">&lt;</span><span class="n">Player</span><span class="p">&gt;(</span><span class="n">p</span><span class="p">=&gt;</span><span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">==</span><span class="s">"Green"</span><span class="p">).</span>
            <span class="nf">FirstOrDefault</span><span class="p">();</span>
        <span class="n">context</span><span class="p">.</span><span class="n">players</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">green</span><span class="p">);</span>
        <span class="n">context</span><span class="p">.</span><span class="nf">SaveChanges</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Query data:</strong></p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span><span class="p">(</span><span class="kt">var</span> <span class="n">context</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SchoolContext</span><span class="p">())</span>
<span class="p">{</span>
    <span class="c1">//with an eager loading by using Microsoft.EntityFrameworkCore.Include,it's not wise.</span>
    <span class="c1">//but we only use it to demonstrate this demo.</span>
    <span class="kt">var</span> <span class="n">teams</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">teams</span><span class="p">.</span>
        <span class="nf">Include</span><span class="p">(</span><span class="n">team</span><span class="p">=&gt;</span><span class="n">team</span><span class="p">.</span><span class="n">players</span><span class="p">).</span>
        <span class="nf">ToList</span><span class="p">();</span>

    <span class="k">foreach</span><span class="p">(</span><span class="kt">var</span> <span class="n">team</span> <span class="k">in</span> <span class="n">teams</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"team name:{0}"</span><span class="p">,</span> <span class="n">team</span><span class="p">.</span><span class="n">name</span><span class="p">);</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">player</span> <span class="k">in</span> <span class="n">team</span><span class="p">.</span><span class="n">players</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"players name:{0}"</span><span class="p">,</span> <span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="conclusion">Conclusion</h1>

<p>You had learned how to run a basic EF Core program.I had put those code in Github <a href="https://github.com/voltwu/C-Sharp-Console-Application-EF-Core-Example/tree/b1e4c8a75245f4bd569b8c0b7cca586523db96f4">C# EF Core Console Application</a>. In the next chapter, I will get deeper. Because of the Coronavirus, I have much more time to write articles.^^ Have a good day! See you in the next chapter.</p>

:ET