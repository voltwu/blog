I"¨"<p>JSON (JavaScript Object Notation) is a lightweight data-interchange format. Python builds very powerful build-in functionality support JSON. This article will discuss the encoding and decoding of JSON in Python. make sure you have already known JSON syntax before starting if you arenâ€™t, please check it first.</p>

<h1 id="python-support-json-natively">Python support JSON Natively!</h1>
<p>Python has a build-in package json for encoding and decoding JSON data. just throw the below little guy up to your file in the first line.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">json</span>
</code></pre></div></div>

<h1 id="decoding-json">Decoding JSON</h1>
<p>json library package provides two methods for deserializing from a string(json format) to a Python Object.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span> <span class="c1">#Decode the json string
</span><span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">fileobj</span><span class="p">)</span> <span class="c1">#Decode while JSON file read
</span></code></pre></div></div>
<p><code class="highlighter-rouge">load()</code> accepted a file_object parameter, deserializing from a file contents. however <code class="highlighter-rouge">loads()</code> accepted string parameter, deserializing from a string.</p>

<p>if the string data or the file contents being deserialized is not a valid JSON document, then a <code class="highlighter-rouge">JSONDecodeError</code> will be raised.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">json</span>

<span class="c1"># some JSON:
</span><span class="n">x</span> <span class="o">=</span>  <span class="s">'{ "school":"oxford","type":"university","location":"England"}'</span>

<span class="c1"># parse x:
</span><span class="n">y</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

<span class="c1"># the result y is a Python dictionary:
</span><span class="n">res</span> <span class="o">=</span> <span class="n">y</span><span class="p">[</span><span class="s">"school"</span><span class="p">]</span> <span class="o">+</span> <span class="s">" is a "</span><span class="o">+</span><span class="n">y</span><span class="p">[</span><span class="s">"type"</span><span class="p">]</span><span class="o">+</span><span class="s">" in "</span><span class="o">+</span><span class="n">y</span><span class="p">[</span><span class="s">"location"</span><span class="p">]</span>

<span class="c1"># Output: oxford is a university in England
</span><span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="encoding-json">Encoding JSON</h1>
<p>json package also provides two methods for serializing Python Object as a JSON formatted string. they are:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">()</span> <span class="c1">#encoding to JSON objects
</span><span class="n">json</span><span class="o">.</span><span class="n">dump</span><span class="p">()</span> <span class="c1">#encoded string writing on file
</span></code></pre></div></div>
<p>the <code class="highlighter-rouge">dump()</code> method will write the encoded string into a file. <code class="highlighter-rouge">dumps()</code> method produces only a JSON form string.</p>

<p>They both accept a <code class="highlighter-rouge">default</code> parameter that should be a function that gets called for objects that canâ€™t otherwise be serialized. it should return a JSON encoded version of the object or raise <code class="highlighter-rouge">TypeError</code>.</p>

<p><code class="highlighter-rouge">TypeError</code> will be raised, if not specified the <code class="highlighter-rouge">default</code> parameter while meeting unable to handled types.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">json</span>

<span class="c1"># a Python object (dict):
</span><span class="n">x</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"name"</span><span class="p">:</span><span class="s">"Jay gatsby"</span><span class="p">,</span>
    <span class="s">"gender"</span><span class="p">:</span><span class="s">"male"</span><span class="p">,</span>
    <span class="s">"career"</span><span class="p">:[</span><span class="s">"thief"</span><span class="p">,</span><span class="s">"gambler"</span><span class="p">,</span><span class="s">"bootlegger"</span><span class="p">],</span>
    <span class="s">"beloved"</span><span class="p">:</span><span class="s">"daisy"</span><span class="p">,</span>
    <span class="s">"friends"</span><span class="p">:</span><span class="s">"nick carraway"</span><span class="p">,</span>
    <span class="s">"great"</span><span class="p">:</span><span class="s">"yes"</span>
<span class="p">}</span>

<span class="c1"># convert into JSON:
# the result y is a JSON string:
</span><span class="n">y</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

<span class="c1"># Output: {"name": "Jay gatsby", "gender": "male", "career": ["thief", "gambler", "bootlegger"], "beloved": "daisy", "friends": "nick carraway", "great": "yes"}
</span><span class="k">print</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</code></pre></div></div>

<p>you have already know how to deserializing and serializing till here. in the next chapter, we will discuss the variable conversion table between JSON and Python.</p>
<h1 id="conversion-table">Conversion table</h1>
<h2 id="json-to-python">JSON to Python</h2>

<table>
  <thead>
    <tr>
      <th>JSON</th>
      <th>Python</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Object</td>
      <td>dict</td>
    </tr>
    <tr>
      <td>Array</td>
      <td>list</td>
    </tr>
    <tr>
      <td>String</td>
      <td>unicode</td>
    </tr>
    <tr>
      <td>number â€“ int</td>
      <td>number - int, long</td>
    </tr>
    <tr>
      <td>number â€“ real</td>
      <td>float</td>
    </tr>
    <tr>
      <td>True</td>
      <td>True</td>
    </tr>
    <tr>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <td>Null</td>
      <td>None</td>
    </tr>
  </tbody>
</table>

<p>you should make sure JSON string is valid JSON form when converting a JSON string into python. the website can help you <a href="http://jsonviewer.stack.hu/">jsonviwer</a>.</p>

<h2 id="python-to-json">Python to JSON</h2>

<table>
  <thead>
    <tr>
      <th>Python</th>
      <th>JSON</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>dict</td>
      <td>Object</td>
    </tr>
    <tr>
      <td>list</td>
      <td>Array</td>
    </tr>
    <tr>
      <td>unicode</td>
      <td>String</td>
    </tr>
    <tr>
      <td>number - int, long</td>
      <td>number â€“ int</td>
    </tr>
    <tr>
      <td>float</td>
      <td>number â€“ real</td>
    </tr>
    <tr>
      <td>True</td>
      <td>True</td>
    </tr>
    <tr>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <td>None</td>
      <td>Null</td>
    </tr>
  </tbody>
</table>

<p>when you convert Python into JSON form string, you should also guarantee that itâ€™s a valid python datatype that can be converted into JSON form. you should specify <code class="highlighter-rouge">default</code> parameter as a function that for custom conversion if you are not using above datatype sheet when converting.</p>

<h1 id="conclusion">Conclusion</h1>
<p>Now everything is very clear. I will summarize steps once more.</p>
<ul>
  <li>import <code class="highlighter-rouge">json</code> package</li>
  <li>deserializing use <code class="highlighter-rouge">loads()</code>/<code class="highlighter-rouge">load()</code></li>
  <li>serializing  use <code class="highlighter-rouge">dumps()</code>/<code class="highlighter-rouge">dump()</code></li>
  <li>make all of the data that converting is valid</li>
</ul>

<p>if you have some recommendations or thoughts, donâ€™t stingy your words.
write it in the comment area we will discuss it together.</p>
:ET